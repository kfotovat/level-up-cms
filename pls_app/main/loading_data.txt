/*class Profile(models.Model):
	user = models.OneToOneField(User, on_delete=models.CASCADE)
	email = models.EmailField(null=False)
	first_name = models.CharField(max_length=30, null=False)
	last_name = models.CharField(max_length=30, null=False)
	full_name = models.CharField(max_length=70, null=True)
	school_site = models.ForeignKey("SchoolSite", null=True, blank=True)
	created = models.DateTimeField(auto_now_add=True, auto_now=False)
	updated = models.DateTimeField(auto_now_add=False, auto_now=True)

	def save(self, *args, **kwargs):
		full_name = "{} {}".format(self.first_name, self.last_name)
		self.full_name = full_name
		super(Profile, self).save(*args, **kwargs)

	class Meta:
		abstract = True

# signals hooking new user creation / update to new profile creation / update
# @receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    if created:
        Profile.objects.create(user=instance)

# @receiver(post_save, sender=User)
def update_user_profile(sender, instance, **kwargs):
    instance.profile.save()

class Student(Profile):

	def group(self):
		return "students"

	def __unicode__(self): #Python 3.X is __str__
		return self.full_name

	courses = models.ManyToManyField("Course")


class Teacher(Profile):

	def group(self):
		return "teachers"

	def __unicode__(self): #Python 3.X is __str__
		return self.full_name

class SchoolSite(models.Model):
	school_site = models.CharField(max_length=100, default="Demo School")
	school_slug = models.SlugField(max_length=100)
	school_type = models.CharField(max_length=50)
	address1 = models.CharField(max_length=50)
	address2 = models.CharField(max_length=50, blank=True)
	city = models.CharField(max_length=50)
	contact_name = models.CharField(max_length=50, null=True)
	contact_phone = models.CharField(max_length=20, null=True, blank=True)
	created = models.DateTimeField(auto_now_add=True, auto_now=False)
	updated = models.DateTimeField(auto_now_add=False, auto_now=True)


	def __unicode__(self): #Python 3.X is __str__
		return self.school_site


class Course(models.Model):
	course_name = models.CharField(max_length=50)
	# fk
	teacher_name = models.ForeignKey("Teacher", null=True, blank=True)
	# a course can have many times offered?
	block_order = models.PositiveIntegerField(default=1)
	start_time = models.TimeField(null=True)
	end_time = models.TimeField(null=True)

	# this sets the redirect after creating a new course
	def get_absolute_url(self):
		return reverse('course-detail', kwargs={'course_id':self.pk})

	def __unicode__(self): #Python 3.X is __str__
		return self.course_name*/
